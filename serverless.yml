
service: sample-serverless
app: sample-serverless
org: himanshu

provider:
  name: aws
  runtime: nodejs10.x
  region: ap-south-1
  environment:
    BLOG_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BLOG_TABLE}"

resources:
  Resources:
    BlogsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.BLOG_TABLE}
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
          - AttributeName: blog_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
          - AttributeName: blog_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: timestamp-index
            KeySchema:
              - AttributeName: timestamp
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

plugins: 
  - serverless-offline

custom:
  allowedHeaders:
    - Accept
    - Content-Type
    - Authorization
    - app_user_id
    - app_user_name

myNextApplication:
  component: serverless-next.js

functions:
  addBlog:
    handler: handler.addBlog
    events:
      - http:
          path: blogs
          method: post
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  getBlog:
    handler: handler.getBlog
    events:
      - http:
          path: blogs/{blog_id}
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  getBlogs:
    handler: handler.getBlogs
    events:
      - http:
          path: blogs/
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  updateBlog:
    handler: handler.updateBlog
    events:
      - http:
          path: blogs/
          method: put
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  deleteBlog:
    handler: handler.deleteBlog
    events:
      - http:
          path: blogs/{blog_id}
          method: delete
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}